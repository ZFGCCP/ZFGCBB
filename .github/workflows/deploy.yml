name: Deploy to Linode

on:
  workflow_run:
    workflows: ["Build and Publish Docker Images"]
    types:
      - completed
    branches:
      - main
      - development

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - main
          - gm112-linode-test
      tag:
        description: "Specific tag to deploy (optional)"
        required: false
        type: string

permissions:
  contents: read
  packages: read
  actions: read # Added permission to read artifacts

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    environment:
      name: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME_LOWER=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          TAG="${{ github.event.inputs.tag }}"

          if [ -z "$TAG" ]; then
            # For workflow_run triggers, use the branch name that triggered the workflow
            if [ "${{ github.event_name }}" == "workflow_run" ]; then
              TAG="${{ github.event.workflow_run.head_branch }}"
            else
              # For manual triggers with no tag, use the environment
              TAG="${{ github.event.inputs.environment }}"
            fi
          fi

          # Convert tag to lowercase and replace slashes with hyphens for Docker compatibility
          TAG=$(echo "$TAG" | tr '[:upper:]' '[:lower:]' | tr '/' '-')

          echo "REGISTRY=ghcr.io/${REPO_OWNER_LOWER}/${REPO_NAME_LOWER}" >> $GITHUB_ENV
          echo "IMAGE_PREFIX=${REPO_OWNER_LOWER}/${REPO_NAME_LOWER}" >> $GITHUB_ENV
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

          echo "Will look for image with tag: $TAG"

      # Download deployment artifact from the previous workflow run
      - name: Download deployment package
        if: ${{ github.event_name == 'workflow_run' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: Build and Publish Docker Images
          run_id: ${{ github.event.workflow_run.id }}
          name: deployment-package
          path: ./

      # Download deployment artifact for manual dispatch
      - name: Download specific tag artifact
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag != '' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: Build and Publish Docker Images
          name: deployment-package
          branch: ${{ contains(github.event.inputs.tag, 'development') && 'development' || 'main' }}
          path: ./
          if_no_artifact_found: warn

      # Fallback to the latest artifact from the branch if no specific tag
      - name: Download latest branch artifact
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag == '' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: Build and Publish Docker Images
          name: deployment-package
          branch: ${{ github.event.inputs.environment == 'development' && 'development' || 'main' }}
          path: ./
          if_no_artifact_found: warn

      - name: Verify deployment package exists
        run: |
          if [ -f "deployment-package.tar.gz" ]; then
            echo "Deployment package found!"
            ls -la deployment-package.tar.gz
          else
            echo "ERROR: deployment-package.tar.gz not found!"
            exit 1
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Copy provisioning script to server
        run: |
          scp -P ${{ secrets.SERVER_PORT }} ./scripts/deployment/01.provision-linode.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      - name: Execute provisioning script
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} -p ${{ secrets.SERVER_PORT }} "chmod +x /tmp/01.provision-linode.sh && sudo /tmp/01.provision-linode.sh"

      - name: Create .env.local on server
        run: |
          cat > /tmp/.env.local <<EOF
          ZFGBB_DATABASE=${{ secrets.ZFGBB_DATABASE }}
          ZFGBB_USER=${{ secrets.ZFGBB_USER }}
          ZFGBB_USER_PASSWORD=${{ secrets.ZFGBB_USER_PASSWORD }}

          SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/${{ secrets.ZFGBB_DATABASE }}
          SPRING_DATASOURCE_USERNAME=${{ secrets.ZFGBB_USER }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.ZFGBB_USER_PASSWORD }}

          MBG_JDBC_URL=jdbc:postgresql://localhost:5432/${{ secrets.ZFGBB_DATABASE }}
          MBG_JBDC_USERNAME=${{ secrets.ZFGBB_USER }}
          MBG_JDBC_PASSWORD=${{ secrets.ZFGBB_USER_PASSWORD }}
          EOF

          scp -P ${{ secrets.SERVER_PORT }} /tmp/.env.local ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/.env

      - name: Pass GHCR credentials to remote server
        run: |
          cat > /tmp/ghcr.env <<EOF
          GHCR_USERNAME=${{ github.actor }}
          GHCR_TOKEN=${{ secrets.GITHUB_TOKEN }}
          REGISTRY=${{ env.REGISTRY }}
          IMAGE_PREFIX=${{ env.IMAGE_PREFIX }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          EOF

          scp -P ${{ secrets.SERVER_PORT }} /tmp/ghcr.env ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      - name: Upload deploy-script.sh to server
        run: |
          scp -P ${{ secrets.SERVER_PORT }} ./scripts/docker/deploy-script.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      # Upload deployment package to server
      - name: Upload deployment package to server
        run: |
          scp -P ${{ secrets.SERVER_PORT }} ./deployment-package.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      - name: Run deployment script on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} -p ${{ secrets.SERVER_PORT }} "bash -s" << 'EOT'
          set -e
          # Ensure target directory exists
          TARGET_DIR="/opt/zfgbb"
          if [ ! -d "$TARGET_DIR" ]; then
            sudo mkdir -p $TARGET_DIR
            sudo chown $(whoami):$(whoami) $TARGET_DIR
          fi

          rm $TARGET_DIR/deploy-script.sh || true
          mv /tmp/deploy-script.sh $TARGET_DIR/deploy-script.sh
          chmod +x $TARGET_DIR/deploy-script.sh
          rm $TARGET_DIR/.env || true
          rm $TARGET_DIR/ghcr.env || true

          # Move deployment package to target directory
          mv /tmp/deployment-package.tar.gz $TARGET_DIR/
          mv /tmp/.env $TARGET_DIR/.env
          mv /tmp/ghcr.env $TARGET_DIR/ghcr.env

          # Run deployment
          cd $TARGET_DIR
          bash ./deploy-script.sh --env .env --tag "${{ env.IMAGE_TAG }}" --package deployment-package.tar.gz || ls -la
          EOT
