name: Deploy to Linode

on:
  workflow_run:
    workflows: ["Provision Linode"]
    types:
      - completed
    branches:
      - main
      - development

permissions:
  contents: read
  packages: read
  actions: read

jobs:
  set_vars:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      REF_NAME: ${{ steps.vars.outputs.REF_NAME }}
      IMAGE_PREFIX: ${{ steps.vars.outputs.IMAGE_PREFIX }}
      IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
      ARTIFACT_NAME: ${{ steps.vars.outputs.ARTIFACT_NAME }}
      REGISTRY: ${{ steps.vars.outputs.REGISTRY }}
    steps:
      - name: Set deployment variables
        id: vars
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          REF_NAME=$(echo "${{ github.event.workflow_run.head_branch }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')

          echo "REF_NAME=$REF_NAME" >> $GITHUB_OUTPUT
          echo "ARTIFACT_NAME=deployment-package-$REF_NAME" >> $GITHUB_OUTPUT
          echo "REGISTRY=ghcr.io/$REPO_OWNER/$REPO_NAME" >> $GITHUB_OUTPUT
          echo "IMAGE_PREFIX=$REPO_OWNER/$REPO_NAME" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$REF_NAME" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: [set_vars]
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment:
      name: ${{ github.ref_name }}

    env:
      TARGET_DIR: /opt/zfgbb

    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/deployment
            scripts/docker

      - name: Setup SSH access
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Upload provisioning script
        run: scp -P ${{ secrets.SERVER_PORT }} scripts/deployment/01.provision-linode.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      - name: Run provisioning script
        run: ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "chmod +x /tmp/01.provision-linode.sh && sudo /tmp/01.provision-linode.sh"

      - name: Upload deploy script
        run: |
          cat > /tmp/.env <<EOF
          # Database credentials
          ZFGBB_DATABASE=${{ secrets.ZFGBB_DATABASE }}
          ZFGBB_USER=${{ secrets.ZFGBB_USER }}
          ZFGBB_USER_PASSWORD=${{ secrets.ZFGBB_USER_PASSWORD }}

          SPRING_DATASOURCE_URL=jdbc:postgresql://zfgbb_postgresql:5432/${{ secrets.ZFGBB_DATABASE }}
          SPRING_DATASOURCE_USERNAME=${{ secrets.ZFGBB_USER }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.ZFGBB_USER_PASSWORD }}

          MBG_JDBC_URL=jdbc:postgresql://zfgbb_postgresql:5432/${{ secrets.ZFGBB_DATABASE }}
          MBG_JBDC_USERNAME=${{ secrets.ZFGBB_USER }}
          MBG_JDBC_PASSWORD=${{ secrets.ZFGBB_USER_PASSWORD }}

          # GHCR credentials for image pulls
          GHCR_USERNAME=${{ github.actor }}
          GHCR_TOKEN=${{ secrets.GITHUB_TOKEN }}
          REGISTRY=${{ needs.set_vars.outputs.REGISTRY }}
          IMAGE_PREFIX=${{ needs.set_vars.outputs.IMAGE_PREFIX }}
          IMAGE_TAG=${{ needs.set_vars.outputs.IMAGE_TAG }}
          EOF

          scp -P ${{ secrets.SERVER_PORT }} /tmp/.env ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:$TARGET_DIR/.env
          scp -P ${{ secrets.SERVER_PORT }} scripts/docker/02.deploy-script.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:$TARGET_DIR/deploy.sh

      - name: Run deployment script on server
        run: |
          ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<'EOT'
            set -e
            cd $TARGET_DIR
            chmod +x ./deploy.sh
            ./deploy.sh --env .env
            rm -f .env
          EOT
