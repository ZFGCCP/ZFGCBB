name: Deploy to Linode

on:
  workflow_run:
    workflows: ["Build and Publish Docker Images"]
    types:
      - completed
    branches:
      - main
      - development

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - main
          - gm112-linode-test
      tag:
        description: "Specific tag to deploy"
        required: true
        type: string

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    environment:
      name: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if Docker image exists in GCR
        id: check_image
        run: |
          IMAGE_TAG=${{ github.event.inputs.tag }}
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/api:${IMAGE_TAG}"

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${{ env.IMAGE_PREFIX }}/api/manifests/${IMAGE_TAG}")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "Image $IMAGE exists in GCR."
          else
            echo "Image $IMAGE does not exist in GCR."
            exit 1
          fi

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Copy provisioning script to server
        run: |
          scp -P ${{ secrets.SERVER_PORT }} ./scripts/deployment/01.provision-linode.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      - name: Execute provisioning script
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} -p ${{ secrets.SERVER_PORT }} "chmod +x /tmp/01.provision-linode.sh && sudo /tmp/01.provision-linode.sh"

      - name: Create .env.local on server
        run: |
          cat > /tmp/.env.local <<EOF
          ZFGBB_DATABASE=${{ secrets.ZFGBB_DATABASE }}
          ZFGBB_USER=${{ secrets.ZFGBB_USER }}
          ZFGBB_USER_PASSWORD=${{ secrets.ZFGBB_USER_PASSWORD }}

          SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/${{ secrets.ZFGBB_DATABASE }}
          SPRING_DATASOURCE_USERNAME=${{ secrets.ZFGBB_USER }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.ZFGBB_USER_PASSWORD }}

          MBG_JDBC_URL=jdbc:postgresql://localhost:5432/${{ secrets.ZFGBB_DATABASE }}
          MBG_JBDC_USERNAME=${{ secrets.ZFGBB_USER }}
          MBG_JDBC_PASSWORD=${{ secrets.ZFGBB_USER_PASSWORD }}
          EOF

          scp -P ${{ secrets.SERVER_PORT }} /tmp/.env.local ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/.env

      - name: Pass GHCR credentials to remote server
        run: |
          cat > /tmp/ghcr.env <<EOF
          GHCR_USERNAME=${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN=${{ secrets.GHCR_TOKEN }}
          EOF

          scp -P ${{ secrets.SERVER_PORT }} /tmp/ghcr.env ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      - name: Run deployment script on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} -p ${{ secrets.SERVER_PORT }} "bash -s" << 'EOT'
          set -e

          # Ensure target directory exists
          if [ ! -d "/opt/zfgbb" ]; then
            sudo mkdir -p /opt/zfgbb
            sudo chown $(whoami):$(whoami) /opt/zfgbb
          fi

          # Copy deploy.sh
          cat > /tmp/deploy.sh << 'EOF'
          $(cat ./scripts/docker/deploy-script.sh)
          EOF

          chmod +x /tmp/deploy.sh
          sudo mv /tmp/deploy.sh /opt/zfgbb/deploy.sh

          # Move .env and ghcr.env
          sudo mv /tmp/.env /opt/zfgbb/.env
          sudo mv /tmp/ghcr.env /opt/zfgbb/ghcr.env

          # Run deployment
          cd /opt/zfgbb
          ./deploy.sh --env .env ${{ github.event.inputs.tag && format('--tag {0}', github.event.inputs.tag) || '' }}
          EOT
