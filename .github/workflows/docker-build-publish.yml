name: Build and Publish Docker Images
on:
  push:
    branches: [main, development]
    tags:
      - "[0-9][0-9][0-9][0-9]*.*" # matches YYYY.ReleaseNumber
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "development"
        type: choice
        options: [development, main, gm112-linode-test]
env:
  REGISTRY: ghcr.io
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate build identifiers
        id: build_ids
        run: |
          # Create timestamp in format YYYYMMDD-HHMMSS
          TIMESTAMP=$(date -u '+%Y%m%d-%H%M%S')
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          # Get branch or tag name for artifact naming
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            REF_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
            echo "REF_TYPE=tag" >> $GITHUB_ENV
          else
            REF_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
            echo "REF_TYPE=branch" >> $GITHUB_ENV
          fi
          echo "REF_NAME=$REF_NAME" >> $GITHUB_ENV

          # Create a unique run ID that combines the REF_NAME and TIMESTAMP
          UNIQUE_RUN_ID="${REF_NAME}-${TIMESTAMP}-${GITHUB_RUN_ID}"
          echo "UNIQUE_RUN_ID=$UNIQUE_RUN_ID" >> $GITHUB_ENV

          # # Create artifact name that includes ref name
          # ARTIFACT_NAME="deployment-package-${REF_NAME}"
          # echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

          REPO_OWNER_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
          REPO_NAME_LOWER=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_PREFIX=${REPO_OWNER_LOWER}/${REPO_NAME_LOWER}" >> $GITHUB_ENV

          echo "Generated IDs:"
          echo "- Timestamp: $TIMESTAMP"
          echo "- Ref Name: $REF_NAME"
          echo "- Ref Type: ${{ env.REF_TYPE }}"
          echo "- Unique Run ID: $UNIQUE_RUN_ID"
          #echo "- Artifact Name: $ARTIFACT_NAME"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata based on whether the workflow was triggered by a tag or branch
      - name: Extract metadata for Docker (tag)
        id: meta_tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}
          tags: |
            type=match,pattern=\d{4}\.\d+,group=0
            type=sha,format=short

      - name: Extract metadata for Docker (branch)
        id: meta_branch
        if: startsWith(github.ref, 'refs/heads/')
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}
          tags: |
            type=ref,event=branch
            type=sha,format=short

      # Set the final Docker tag (tag if available, otherwise branch)
      - name: Set effective Docker tag
        run: |
          if [[ "${{ steps.meta_tag.outputs.version }}" != "" ]]; then
            DOCKER_TAG="${{ steps.meta_tag.outputs.version }}"
          else
            DOCKER_TAG="${{ steps.meta_branch.outputs.version }}"
          fi

          echo "Using Docker tag: $DOCKER_TAG"
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:api-${{ env.DOCKER_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:api-latest
          target: deploy

      # Build and push Database image (database target)
      - name: Build and push database image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:postgresql-${{ env.DOCKER_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:postgresql-latest
          target: database
