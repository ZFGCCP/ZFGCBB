name: Provision Linode

on:
  workflow_run:
    workflows: ["Build and Publish Docker Images"]
    types:
      - completed
    branches:
      - main
      - development

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - main
          - gm112-linode-test
      tag:
        description: "Specific tag to deploy (optional)"
        required: false
        type: string

permissions:
  contents: read
  packages: read
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    environment:
      name: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set deployment variables
        id: set_vars
        run: |
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME_LOWER=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')

          # Determine reference name (branch or tag) for artifact naming
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            # For workflow_run triggers, use the branch name that triggered the workflow
            REF_NAME="${{ github.event.workflow_run.head_branch }}"
          elif [ -n "${{ github.event.inputs.tag }}" ]; then
            # For manual triggers with tag specified
            REF_NAME="${{ github.event.inputs.tag }}"
          else
            # For manual triggers with environment but no tag, use the branch name
            REF_NAME="${{ github.ref_name }}"
          fi

          # Convert ref name to lowercase and replace slashes with hyphens for compatibility
          REF_NAME=$(echo "$REF_NAME" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          echo "REF_NAME=$REF_NAME" >> $GITHUB_ENV

          # Set artifact name based on ref name
          ARTIFACT_NAME="deployment-package-${REF_NAME}"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

          # Set registry and image info
          echo "REGISTRY=ghcr.io/${REPO_OWNER_LOWER}/${REPO_NAME_LOWER}" >> $GITHUB_ENV
          echo "IMAGE_PREFIX=${REPO_OWNER_LOWER}/${REPO_NAME_LOWER}" >> $GITHUB_ENV
          echo "IMAGE_TAG=$REF_NAME" >> $GITHUB_ENV

          echo "Will look for artifact with name: $ARTIFACT_NAME"
          echo "Will look for image with tag: $REF_NAME"

      - name: Generate build identifiers
        id: build_ids
        run: |
          # Create timestamp in format YYYYMMDD-HHMMSS
          TIMESTAMP=$(date -u '+%Y%m%d-%H%M%S')
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          # Get branch or tag name for artifact naming
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            REF_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
            echo "REF_TYPE=tag" >> $GITHUB_ENV
          else
            REF_NAME=$(echo "${{ github.ref_name }}" | tr '/' '-')
            echo "REF_TYPE=branch" >> $GITHUB_ENV
          fi
          echo "REF_NAME=$REF_NAME" >> $GITHUB_ENV

          # Create a unique run ID that combines the REF_NAME and TIMESTAMP
          UNIQUE_RUN_ID="${REF_NAME}-${TIMESTAMP}-${GITHUB_RUN_ID}"
          echo "UNIQUE_RUN_ID=$UNIQUE_RUN_ID" >> $GITHUB_ENV

          # # Create artifact name that includes ref name
          # ARTIFACT_NAME="deployment-package-${REF_NAME}"
          # echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

          echo "Generated IDs:"
          echo "- Timestamp: $TIMESTAMP"
          echo "- Ref Name: $REF_NAME"
          echo "- Ref Type: ${{ env.REF_TYPE }}"
          echo "- Unique Run ID: $UNIQUE_RUN_ID"
          #echo "- Artifact Name: $ARTIFACT_NAME"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Copy provisioning script to server
        run: |
          scp -P ${{ secrets.SERVER_PORT }} ./scripts/deployment/01.provision-linode.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      - name: Execute provisioning script
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} -p ${{ secrets.SERVER_PORT }} "chmod +x /tmp/01.provision-linode.sh && sudo /tmp/01.provision-linode.sh"
