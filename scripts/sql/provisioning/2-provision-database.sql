CREATE SEQUENCE IF NOT EXISTS PUBLIC.BOARD_SEQUENCE START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.ATTRIBUTE_DATA_TYPE_ATTRIBUTE_DATA_TYPE_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.BB_CODE_ATTRIBUTE_BB_CODE_ATTRIBUTE_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.BB_CODE_ATTRIBUTE_MODE_BB_CODE_ATTRIBUTE_MODE_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.BB_CODE_CONFIG_BB_CODE_CONFIG_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.BOARD_BOARD_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.BR_BOARD_PERMISSION_BR_BOARD_PERMISSION_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.BR_USER_PERMISSION_BR_USER_PERMISSION_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.EMAIL_ADDRESS_EMAIL_ADDRESS_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.FORUM_FORUM_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.MESSAGE_HISTORY_MESSAGE_HISTORY_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.MESSAGE_MESSAGE_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.PERMISSION_PERMISSION_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.THREAD_THREAD_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE SEQUENCE IF NOT EXISTS ZFGBB.USER_USER_ID_SEQ AS INTEGER START
WITH
	1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;

CREATE TABLE IF NOT EXISTS ZFGBB.IP_ADDRESS (
	IP_ADDRESS_ID INTEGER NOT NULL,
	IP TEXT NOT NULL,
	IP_V6_FLAG BOOLEAN NOT NULL,
	IS_SPAMMER_FLAG BOOLEAN NOT NULL,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT IP_ADDRESS_PKEY PRIMARY KEY (IP_ADDRESS_ID)
);

ALTER TABLE IF EXISTS ZFGBB.IP_ADDRESS OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.ATTRIBUTE_DATA_TYPE (
    ATTRIBUTE_DATA_TYPE_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	TYPE_NAME TEXT NOT NULL,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);

ALTER TABLE IF EXISTS ZFGBB.ATTRIBUTE_DATA_TYPE OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.BB_CODE_ATTRIBUTE (
	BB_CODE_ATTRIBUTE_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	ATTRIBUTE_DATA_TYPE INTEGER NOT NULL,
	ATTRIBUTE_INDEX INTEGER NOT NULL,
	BB_CODE_ATTRIBUTE_MODE_ID INTEGER NOT NULL,
	NAME TEXT NOT NULL,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);

ALTER TABLE IF EXISTS ZFGBB.BB_CODE_ATTRIBUTE OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.BB_CODE_ATTRIBUTE_MODE (
	BB_CODE_ATTRIBUTE_MODE_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	BB_CODE_CONFIG_ID INTEGER NOT NULL,
	CONTENT_IS_ATTRIBUTE_FLAG BOOLEAN DEFAULT FALSE NOT NULL,
	OPEN_TAG TEXT NOT NULL,
	CLOSE_TAG TEXT NOT NULL,
	OUTPUT_CONTENT_FLAG BOOLEAN DEFAULT FALSE NOT NULL,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);

ALTER TABLE IF EXISTS ZFGBB.BB_CODE_ATTRIBUTE_MODE OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.BB_CODE_CONFIG (
	BB_CODE_CONFIG_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	CODE TEXT NOT NULL,
	END_TAG TEXT NOT NULL,
	PROCESS_CONTENT_FLAG BOOLEAN DEFAULT FALSE NOT NULL,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT BB_CODE_CONFIG_CODE_KEY UNIQUE (CODE)
);

ALTER TABLE IF EXISTS ZFGBB.BB_CODE_CONFIG OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.PERMISSION (
	PERMISSION_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	PERMISSION_NAME CHARACTER VARYING(32) NOT NULL,
	PERMISSION_CODE CHARACTER VARYING(64) NOT NULL,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL
);

ALTER TABLE IF EXISTS ZFGBB.PERMISSION OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.USER (
	USER_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	SSO_KEY CHARACTER VARYING(64) NOT NULL,
	ACTIVE_FLAG BOOLEAN DEFAULT FALSE NOT NULL,
	DISPLAY_NAME CHARACTER VARYING NOT NULL
);

ALTER TABLE IF EXISTS ZFGBB.USER OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.CATEGORY (
	CATEGORY_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	CATEGORY_NAME CHARACTER VARYING(32) NOT NULL,
	DESCRIPTION CHARACTER VARYING(64),
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	PARENT_BOARD_ID INTEGER
);

ALTER TABLE IF EXISTS ZFGBB.CATEGORY OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.BOARD (
	BOARD_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	BOARD_NAME TEXT NOT NULL,
	DESCRIPTION TEXT,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
	CATEGORY_ID INTEGER,
	CONSTRAINT FK_BOARD_CATEGORY_ID FOREIGN KEY (CATEGORY_ID) REFERENCES ZFGBB.CATEGORY (CATEGORY_ID) NOT VALID
);

ALTER TABLE IF EXISTS ZFGBB.BOARD OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.THREAD (
	THREAD_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	THREAD_NAME CHARACTER VARYING(64) NOT NULL,
	LOCKED_FLAG BOOLEAN DEFAULT FALSE NOT NULL,
	PINNED_FLAG BOOLEAN DEFAULT FALSE NOT NULL,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	BOARD_ID INTEGER NOT NULL,
	CREATED_USER_ID INTEGER NOT NULL,
	CONSTRAINT FK_THREAD_BOARD_ID FOREIGN KEY (BOARD_ID) REFERENCES ZFGBB.BOARD (BOARD_ID) NOT VALID,
	CONSTRAINT FK_THREAD_CREATED_USER_ID FOREIGN KEY (CREATED_USER_ID) REFERENCES ZFGBB.USER (USER_ID) NOT VALID
);

ALTER TABLE IF EXISTS ZFGBB.THREAD OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.MESSAGE (
	MESSAGE_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	OWNER_ID INTEGER NOT NULL,
	THREAD_ID INTEGER,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	POST_IN_THREAD INTEGER DEFAULT 0 NOT NULL,
	CONSTRAINT FK_MESSAGE_THREAD_ID FOREIGN KEY (THREAD_ID) REFERENCES ZFGBB.THREAD (THREAD_ID) NOT VALID,
	CONSTRAINT FK_MESSAGE_USER_ID FOREIGN KEY (OWNER_ID) REFERENCES ZFGBB.USER (USER_ID) NOT VALID
);

ALTER TABLE IF EXISTS ZFGBB.MESSAGE OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.MESSAGE_HISTORY (
	MESSAGE_HISTORY_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	MESSAGE_ID INTEGER NOT NULL,
	MESSAGE_TEXT TEXT NOT NULL,
	CURRENT_FLAG BOOLEAN DEFAULT FALSE NOT NULL,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	IP_ADDRESS_ID INTEGER NOT NULL,
	CONSTRAINT FK_MESSAGE_HISTORY_IP_ADDRESS_ID FOREIGN KEY (IP_ADDRESS_ID) REFERENCES ZFGBB.IP_ADDRESS (IP_ADDRESS_ID) NOT VALID,
	CONSTRAINT FK_MESSAGE_HISTORY_MESSAGE_ID FOREIGN KEY (MESSAGE_ID) REFERENCES ZFGBB.MESSAGE (MESSAGE_ID) NOT VALID
);

ALTER TABLE IF EXISTS ZFGBB.MESSAGE_HISTORY OWNER TO ZFGCADMIN;


CREATE TABLE IF NOT EXISTS ZFGBB.EMAIL_ADDRESS (
	EMAIL_ADDRESS_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	EMAIL_ADDRESS CHARACTER VARYING(32) NOT NULL,
	CREATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	UPDATED_TS TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	SPAMMER_FLAG BOOLEAN DEFAULT FALSE NOT NULL,
	USER_ID INTEGER,
	CONSTRAINT UN_EMAIL_ADDRESS_USER_ID UNIQUE (USER_ID),
	CONSTRAINT FK_EMAIL_ADDRESS_USER_ID FOREIGN KEY (USER_ID) REFERENCES ZFGBB.USER (USER_ID) NOT VALID
);

ALTER TABLE IF EXISTS ZFGBB.EMAIL_ADDRESS OWNER TO ZFGCADMIN;

CREATE TABLE IF NOT EXISTS ZFGBB.BR_BOARD_PERMISSION (
	BR_BOARD_PERMISSION_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	BOARD_ID INTEGER NOT NULL,
	PERMISSION_ID INTEGER NOT NULL,
	CONSTRAINT UN_BOARD_PERMISSION UNIQUE (BOARD_ID, PERMISSION_ID),
	CONSTRAINT FK_BOARD_PERMISSION_BOARD_ID FOREIGN KEY (BOARD_ID) REFERENCES ZFGBB.BOARD (BOARD_ID) NOT VALID,
	CONSTRAINT FK_BOARD_PERMISSION_PERMISSION_ID FOREIGN KEY (PERMISSION_ID) REFERENCES ZFGBB.PERMISSION (PERMISSION_ID) NOT VALID
);

ALTER TABLE IF EXISTS ZFGBB.BR_BOARD_PERMISSION OWNER TO ZFGCADMIN;

CREATE OR REPLACE VIEW ZFGBB.BOARD_PERMISSION_VIEW AS
SELECT
	B.BOARD_ID,
	P.PERMISSION_ID,
	P.PERMISSION_CODE,
	P.PERMISSION_NAME
FROM
	(
		(
			ZFGBB.BR_BOARD_PERMISSION BR
			JOIN ZFGBB.PERMISSION P ON ((P.PERMISSION_ID = BR.PERMISSION_ID))
		)
		JOIN ZFGBB.BOARD B ON ((B.BOARD_ID = BR.BOARD_ID))
	);

CREATE TABLE IF NOT EXISTS ZFGBB.BR_USER_PERMISSION (
	BR_USER_PERMISSION_ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	USER_PERMISSION_ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	CONSTRAINT FK_BR_USER_PERMISSION_ID_USER_ID FOREIGN KEY (USER_ID) REFERENCES ZFGBB.USER (USER_ID) MATCH FULL NOT VALID,
	CONSTRAINT FK_BR_USER_PERMISSION_PERMISSION_ID FOREIGN KEY (USER_PERMISSION_ID) REFERENCES ZFGBB.PERMISSION (PERMISSION_ID) MATCH FULL NOT VALID
);

ALTER TABLE IF EXISTS ZFGBB.BR_USER_PERMISSION OWNER TO ZFGCADMIN;

CREATE OR REPLACE VIEW ZFGBB.USER_PERMISSION_VIEW AS
SELECT
	U.USER_ID,
	P.PERMISSION_ID,
	P.PERMISSION_CODE
FROM
	(
		ZFGBB.BR_USER_PERMISSION U
		JOIN ZFGBB.PERMISSION P ON ((P.PERMISSION_ID = U.USER_PERMISSION_ID))
	);

CREATE OR REPLACE VIEW ZFGBB.CURRENT_MESSAGE_VIEW AS
SELECT
	M.MESSAGE_ID,
	M.OWNER_ID,
	M.THREAD_ID,
	H.MESSAGE_TEXT,
	H.MESSAGE_HISTORY_ID,
	M.POST_IN_THREAD
FROM
	(
		ZFGBB.MESSAGE M
		JOIN ZFGBB.MESSAGE_HISTORY H ON (
			(
				(H.MESSAGE_ID = M.MESSAGE_ID)
				AND (H.CURRENT_FLAG = TRUE)
			)
		)
	);
